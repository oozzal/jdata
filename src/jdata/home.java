
/*
 * home.java
 *
 * Created on Aug 17, 2011, 1:39:48 AM
 */

package jdata;

import java.awt.Desktop;
import javax.swing.JOptionPane;
import java.io.*;
import java.sql.SQLException;

/**
 * @author oozzal
 */
public class home extends javax.swing.JFrame {

    private databaseObject dbObj = null;
    private File[] browsedFiles = null;
    private boolean check = true;
    /** Creates new form home */
    public home() {
        initComponents();
    }
    public home(databaseObject dbObject) {
        this.dbObj = dbObject;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        browseInfoLabel = new javax.swing.JLabel();
        browseTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        uploadButton = new javax.swing.JButton();
        downloadInfoLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listModel = new javax.swing.DefaultListModel();
        filesList = new javax.swing.JList(listModel);
        downloadButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        welcomeLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        logoutMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        manageUsersMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(dbObj.appName + "->Home");
        setBounds(new java.awt.Rectangle(280, 200, 0, 0));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        browseInfoLabel.setText("Browse a file to be uploaded:");

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        uploadButton.setText("Upload");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        downloadInfoLabel.setText("Select a file to be downloaded:");

        filesList.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        filesList.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jScrollPane1.setViewportView(filesList);

        downloadButton.setText("Download");
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        viewButton.setText("View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        welcomeLabel.setForeground(java.awt.Color.red);
        welcomeLabel.setText("Welcome, " + dbObj.user);

        fileMenu.setText("File");

        logoutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        logoutMenuItem.setText("Logout");
        logoutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(logoutMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        optionsMenu.setText("Options");

        manageUsersMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        manageUsersMenuItem.setText("Manage Users");
        manageUsersMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageUsersMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(manageUsersMenuItem);

        if(dbObj.user.equals("root")) {

            menuBar.add(optionsMenu);
        }

        helpMenu.setText("Help");

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        aboutMenuItem.setText("About " + dbObj.appName);
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(browseInfoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(browseButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(uploadButton))
                                .addComponent(browseTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(downloadInfoLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(downloadButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(viewButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(deleteButton)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(logoutButton)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(welcomeLabel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(welcomeLabel)
                .addGap(18, 18, 18)
                .addComponent(browseInfoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseButton)
                    .addComponent(uploadButton))
                .addGap(18, 18, 18)
                .addComponent(downloadInfoLabel)
                .addGap(11, 11, 11)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(downloadButton)
                    .addComponent(viewButton)
                    .addComponent(deleteButton)
                    .addComponent(logoutButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        // TODO add your handling code here:
        javax.swing.JFileChooser filechooser = new javax.swing.JFileChooser();
        filechooser.setMultiSelectionEnabled(true);
        int returnVal = filechooser.showDialog(this,"Choose a file");
        if(returnVal != javax.swing.JFileChooser.CANCEL_OPTION) {
            browsedFiles = filechooser.getSelectedFiles();
            String browsedFilesPaths = "";
            for(int i = 0; i < browsedFiles.length; i++) {
                browsedFilesPaths += browsedFiles[i].getPath() + "; ";
            }
            browseTextField.setText(browsedFilesPaths);
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
        // TODO add your handling code here:
        for(int i = 0; i < browsedFiles.length; i++) {
            dbObj.filePath = browsedFiles[i].getPath();
            uploadFile();
        }
        if(check){
            dbObj.showDialog("Upload Complete!");
            browseTextField.setText("");
        }
    }//GEN-LAST:event_uploadButtonActionPerformed

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
        // TODO add your handling code here:
        if(!filesList.isSelectionEmpty()) {
            Object[] files = filesList.getSelectedValues();
            for(int i = 0; i < files.length; i++) {
                dbObj.fileName = files[i].toString();
                downloadFile();
            }
            if(check) {
                dbObj.showDialog("File(s) downloaded!");
            }
        } else {
            dbObj.showDialog("Please Select a file to be downloaded!");
        }
    }//GEN-LAST:event_downloadButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
        if(!filesList.isSelectionEmpty()) {
            dbObj.fileName = filesList.getSelectedValue().toString();
            viewFile();
        } else {
            dbObj.showDialog("Please select a file to be viewed!");
        }
    }//GEN-LAST:event_viewButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        Object[] options = {"From Hard Drive","From Database","From Both"};

        int n = JOptionPane.showOptionDialog(null, "Where would you like to delete the file from ?",
                "Delete Confirmation",JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

        if(!filesList.isSelectionEmpty()) {
            Object[] files = filesList.getSelectedValues();
            for(int i = 0; i < files.length; i++) {
                dbObj.fileName = files[i].toString();
                if(n == 0 || n ==2) {
                    if(new File(dbObj.downloadFolder + dbObj.fileName).exists()) {
                        new File(dbObj.downloadFolder + dbObj.fileName).delete();
                        check = true;
                    } else {
                        dbObj.showDialog("File "+ dbObj.fileName +" Doesn't Exist In Hard Drive!");
                        check = false;
                    }
                }
                if(n == 1 || n == 2) {
                    if(deleteFromDatabase()) {
                        fillList();
                        check = true;
                    } else {
                        dbObj.showDialog("Delete of file "+ dbObj.fileName +" Failed");
                        check = false;
                    }
               }

            }
            if(check) {
                dbObj.showDialog("File(s) delete successful");
            }
        } else {
            dbObj.showDialog("Please Select a file to be downloaded!");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        // TODO add your handling code here:
        dispose();
        new start().setVisible(true);
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        fillList();
    }//GEN-LAST:event_formWindowOpened

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        // TODO add your handling code here:
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        dbObj.aboutjData();
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void logoutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutMenuItemActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new start().setVisible(true);
    }//GEN-LAST:event_logoutMenuItemActionPerformed

    private void manageUsersMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageUsersMenuItemActionPerformed
        // TODO add your handling code here:
        new manageUsers().setVisible(true);
    }//GEN-LAST:event_manageUsersMenuItemActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new home().setVisible(true);
            }
        });
    }

    private void fillList() {
        databaseObject db = new databaseObject();
        db.user = dbObj.user;
        db.pass = dbObj.pass;
        db.query = "SELECT NAME from " + db.user + "_files";
        listModel.clear();
        try {
            db.ps = db.con.prepareStatement(db.query);
            db.rs = db.ps.executeQuery();
            while(db.rs.next()) {//till the next element in the table is found
                listModel.addElement(db.rs.getString("name"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        if(!listModel.isEmpty()) {
            filesList.setSelectedIndex(0);
        }
    }

    private void uploadFile() {
        String error = browsedFileError();
        dbObj.query = "insert into " + dbObj.user + "_files(name,file) values(?, ?)";
        if(error.equals("")) { //upload script here
            if(dbObj.upload()) {
                fillList();
            } else {
                dbObj.showDialog("Error in File Upload!\n "
                        + "May be due to large file size!\n"
                        + "See output screen for more details!");
                check = false;
            }
        } else {    //error in browsed file
            dbObj.showDialog(error);
            check = false;
        }
    }

    private void downloadFile() {
        if(new File(dbObj.downloadFolder + dbObj.fileName).exists()) {
                dbObj.showDialog("File already exists in Hard Drive!");
                check = false;
        } else {
            dbObj.query = "SELECT file FROM " + dbObj.user + "_files where name='" + dbObj.fileName + "'";
            if(!(dbObj.download())){
                dbObj.showDialog("Error in download of file " + dbObj.fileName + "!");
                check = false;
            } else {
                check = true;
            }
        }
    }

    private void viewFile() {
        if(new File(dbObj.downloadFolder + dbObj.fileName).exists()) {
            try {
                Desktop.getDesktop().open(new File(dbObj.downloadFolder + dbObj.fileName));
            } catch (IOException ex) {
                dbObj.showDialog("Unidentified file " + dbObj.fileName);
                //Logger.getLogger(home.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            dbObj.showDialog("File "+ dbObj.fileName +" doesn't exist in the download folder!\nPlease download it first!");
        }
    }

    private boolean deleteFromDatabase() {
        databaseObject db = new databaseObject();
        db.user = dbObj.user;
        db.pass = dbObj.pass;
        db.fileName = dbObj.fileName;
        db.query = "DELETE FROM " + db.user + "_files WHERE name='" + db.fileName + "'";
        if(db.execute_update()) {
            return true;
        } else {
            return false;
        }
    }

    private String browsedFileError() {
        String error = null;
        if(browseTextField.getText().isEmpty()) {
            error = "No file browsed!";
        } else if(!(new File(dbObj.filePath).exists())) {
            error = "Browsed file doesn't exist!";
        } else {
            String filename = new File(dbObj.filePath).getName();//this condition to avoid if user inputs path of the file in the browse_txt and if it exists
            if(listModel.contains(filename)) {
                error = "A file with the same name already exists in database";
            } else {
                error = "";
            }
        }
        return error;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel browseInfoLabel;
    private javax.swing.JTextField browseTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton downloadButton;
    private javax.swing.JLabel downloadInfoLabel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JList filesList;
    private javax.swing.DefaultListModel listModel;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logoutButton;
    private javax.swing.JMenuItem logoutMenuItem;
    private javax.swing.JMenuItem manageUsersMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JButton uploadButton;
    private javax.swing.JButton viewButton;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables

}
